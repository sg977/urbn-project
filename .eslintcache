[{"/Users/sguo/Documents/Personal Project/urbn-project/src/index.js":"1","/Users/sguo/Documents/Personal Project/urbn-project/src/reportWebVitals.js":"2","/Users/sguo/Documents/Personal Project/urbn-project/src/App.js":"3","/Users/sguo/Documents/Personal Project/urbn-project/src/pages/Discover.js":"4","/Users/sguo/Documents/Personal Project/urbn-project/src/pages/Home.js":"5","/Users/sguo/Documents/Personal Project/urbn-project/src/components/Col/index.js":"6","/Users/sguo/Documents/Personal Project/urbn-project/src/components/Row/index.js":"7","/Users/sguo/Documents/Personal Project/urbn-project/src/components/Banner/index.js":"8","/Users/sguo/Documents/Personal Project/urbn-project/src/components/Navbar/index.js":"9","/Users/sguo/Documents/Personal Project/urbn-project/src/components/Footer/index.js":"10","/Users/sguo/Documents/Personal Project/urbn-project/src/components/Slider/index.js":"11","/Users/sguo/Documents/Personal Project/urbn-project/src/components/Marker/index.js":"12","/Users/sguo/Documents/Personal Project/urbn-project/src/components/Card/index.js":"13","/Users/sguo/Documents/Personal Project/urbn-project/src/components/MapAutoAomplete/index.js":"14","/Users/sguo/Documents/Personal Project/urbn-project/src/pages/Test.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":723,"mtime":1609743022127,"results":"19","hashOfConfig":"17"},{"size":8973,"mtime":1609742017980,"results":"20","hashOfConfig":"17"},{"size":1818,"mtime":1609743095003,"results":"21","hashOfConfig":"17"},{"size":195,"mtime":1609743058970,"results":"22","hashOfConfig":"17"},{"size":150,"mtime":1609743060791,"results":"23","hashOfConfig":"17"},{"size":253,"mtime":1609615411198,"results":"24","hashOfConfig":"17"},{"size":1164,"mtime":1609730055288,"results":"25","hashOfConfig":"17"},{"size":191,"mtime":1609544233496,"results":"26","hashOfConfig":"17"},{"size":389,"mtime":1609743138113,"results":"27","hashOfConfig":"17"},{"size":273,"mtime":1609743039978,"results":"28","hashOfConfig":"17"},{"size":1148,"mtime":1609743045167,"results":"29","hashOfConfig":"17"},{"size":1713,"mtime":1609743031062,"results":"30","hashOfConfig":"17"},{"size":761,"mtime":1609743144246,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"4068ys",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sguo/Documents/Personal Project/urbn-project/src/index.js",[],["64","65"],"/Users/sguo/Documents/Personal Project/urbn-project/src/reportWebVitals.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/App.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/pages/Discover.js",["66","67"],"import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport MapAutoComplete from '../components/MapAutoAomplete';\nimport Marker from '../components/Marker';\nimport Card from '../components/Card';\nimport DistanceSlider from '../components/Slider';\n\nimport { Button, Input, Divider} from 'antd';\n\n// google api key\nconst apiKey = process.env.REACT_APP_API_KEY;\n// default is Philly\nconst PHILLY = { lat: 39.9525, lng:  -75.1652};\n// set up initial state\nclass Discover extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    //  location name and name \n      constraints: [{ name: '', time: 0 }],\n      searchResults: [],\n      mapsLoaded: false,\n      markers: [],\n      map: {},\n      mapsApi: {},\n      phillyLatLng: {},\n      autoCompleteService: {},\n      placesService: {},\n      geoCoderService: {},\n      directionService: {},\n    };\n  }\n\n  // Update name for constraint\n  updateConstraintName = ((event, key) => {\n    event.preventDefault();\n    const oldConstraints = this.state.constraints;\n    const constraints = Object.assign([], oldConstraints);\n    constraints[key].name = event.target.value;\n    this.setState({ constraints });\n  });\n\n  // Updates distace for constraint\n  updateConstraintTime = ((key, value) => {\n    const oldConstraints = this.state.constraints;\n    const constraints = Object.assign([], oldConstraints);\n    constraints[key].time = value;\n    this.setState({ constraints });\n  });\n\n  // Adds new marker if it does not exist\n  addMarker = ((lat, lng, name) => {\n    const oldMarkers = this.state.markers;\n    const markers = Object.assign([], oldMarkers);\n\n    // If name already exists in marker, just update\n    let newMarker = true;\n    for (let i = 0; i < markers.length; i++) {\n      if (markers[i].name === name) {\n        newMarker = false;\n        markers[i].lat = lat;\n        markers[i].lng = lng;\n        window.alert(`Updated \"${name}\" Marker`);\n        break;\n      }\n    }\n    // Name does not exist in marker list. Create new marker\n    if (newMarker) {\n        // check if it is push to the new array\n      markers.push({ lat, lng, name });\n      console.log(markers)\n      window.alert(`Added new \"${name}\" Marker`);\n    }\n// set state for the newMarker\n    this.setState({ markers });\n  });\n\n  // Runs once when the Google Maps library is ready\n  // Initializes all services that we need\n  apiHasLoaded = ((map, mapsApi) => {\n    this.setState({\n      mapsLoaded: true,\n      map,\n      mapsApi,\n      phillyLatLng: new mapsApi.LatLng(PHILLY.lat, PHILLY.lng),\n      autoCompleteService: new mapsApi.places.AutocompleteService(),\n      placesService: new mapsApi.places.PlacesService(map),\n      geoCoderService: new mapsApi.Geocoder(),\n      directionService: new mapsApi.DirectionsService(),\n    });\n  });\n\n  // Find resturants based on constraints\n  handleSearch = (() => {\n    const { markers, constraints, placesService, directionService, mapsApi } = this.state;\n    if (markers.length === 0) {\n      window.alert('CONSTRAINT NOT VALID');\n      return;\n    }\n\n    const filteredResults = [];\n    const marker = markers[0];\n    const timeLimit = constraints[0].time;\n    const markerLatLng = new mapsApi.LatLng(marker.lat, marker.lng);\n\n    const placesRequest = {\n      location: markerLatLng,\n      type: ['restaurant', 'cafe'], // List of types: https://developers.google.com/places/supported_types\n      query: 'restaurant',\n      rankBy: mapsApi.places.RankBy.DISTANCE,\n    };\n\n    // Look for all resturants \n    placesService.textSearch(placesRequest, ((response) => {\n      // Only look at the nearest top 10.\n      const responseLimit = Math.min(10, response.length);\n      for (let i = 0; i < responseLimit; i++) {\n        const restaurant = response[i];\n        const { rating, name } = restaurant;\n        const address = restaurant.formatted_address;\n        const priceLevel = restaurant.price_level; // 1, 2, 3...\n        let photoUrl = '';\n        let openNow = false;\n        if (restaurant.opening_hours) {\n          openNow = restaurant.opening_hours.open_now; // e.g true/false\n        }\n        // sometime there is no photo\n        if (restaurant.photos && restaurant.photos.length > 0) {\n          photoUrl = restaurant.photos[0].getUrl();\n        }\n\n        // Second,check if each resturant is within travelling distance\n        const directionRequest = {\n          origin: markerLatLng,\n          destination: address, // Address of resturant\n          travelMode: 'DRIVING',\n        }\n        directionService.route(directionRequest, ((result, status) => {\n          if (status !== 'OK') { return }\n          const travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\n          const travellingTimeInMinutes = travellingRoute.duration.value / 60;\n          if (travellingTimeInMinutes < timeLimit) {\n            const distanceText = travellingRoute.distance.text; // km\n            const timeText = travellingRoute.duration.text; // mins\n            filteredResults.push({\n              name,\n              rating,\n              address,\n              openNow,\n              priceLevel,\n              photoUrl,\n              distanceText,\n              timeText,\n            });\n          }\n          // Final results, then add then back to result \n          this.setState({ searchResults: filteredResults });\n        }));\n      }\n    }));\n  });\n\n  render() {\n    const { constraints, mapsLoaded, phillyLatLng, markers, searchResults } = this.state;\n    const { autoCompleteService, geoCoderService } = this.state; // Google Maps Services\n    return (\n      <div className=\"w-100 d-flex py-4 flex-wrap justify-content-center\">\n        <h1 className=\"w-100 fw-md\">EAT OUT</h1>\n        {/* Constraints section */}\n        <section className=\"col-4\">\n          {mapsLoaded ?\n            <div>\n              {constraints.map((constraint, key) => {\n                const { name, time } = constraint;\n                return (\n                  <div key={key} className=\"mb-4\">\n                    <div className=\"d-flex mb-2\">\n                        {/* name should be updated */}\n                      <Input className=\"col-4 mr-2\" placeholder=\"Name\" onChange={(event) => this.updateConstraintName(event, key)} />\n                      {/* Autocomplete call is working, but not input is submitted */}\n                      <MapAutoComplete\n                        autoCompleteService={autoCompleteService}\n                        geoCoderService={geoCoderService}\n                        phillyLatLng={phillyLatLng}\n                        markerName={name}\n                        addMarker={this.addMarker}\n                      />\n                    </div>\n                    <DistanceSlider\n                    // slider is not rendering\n                      value={time}\n                      onChange={(value) => this.updateConstraintTime(key, value)}\n                      text=\"How Far Should We Go?\"\n                    />\n                     {/* Search Button */}\n                    <Button className=\"mt-4 fw-md\" type=\"primary\" size=\"large\" onClick={this.handleSearch}>Search!</Button>\n                    <Divider />\n                  </div>\n                );\n              })}\n            </div>\n            : null\n          }\n        </section>\n\n          {/* api works, map disply correctly */}\n        <section className=\"col-12\">\n          <GoogleMapReact\n            style={{height: '500px'}}\n            resetBoundsOnResize={true}\n            defaultCenter={this.props.center}\n            defaultZoom={this.props.zoom}\n            bootstrapURLKeys={{\n              key: apiKey,\n              libraries: ['places', 'directions']\n            }}\n            defaultZoom={11}\n            defaultCenter={{ lat: PHILLY.lat, lng: PHILLY.lng }}\n            yesIWantToUseGoogleMapApiInternals={true}\n            onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)} // \"maps\" is the mapApi\n          >\n            {/* Pin markers on the Map*/}\n            {markers.map((marker, key) => {\n              const { name, lat, lng } = marker;\n              return (\n                <Marker key={key} name={name} lat={lat} lng={lng} />\n              );\n            })}\n          </GoogleMapReact>\n        </section>\n\n        {/* Results section */}\n        {searchResults.length > 0 ?\n          <>\n            <Divider />\n            <section className=\"col-12\">\n              <div className=\"d-flex flex-column justify-content-center\">\n                <h1 className=\"mb-4 fw-md\">Tadah! Ice-Creams!</h1>\n                <div className=\"d-flex flex-wrap\">\n                  {searchResults.map((result, key) => (\n                    <Card value={result} key={key} />\n                  ))}\n                </div>\n              </div>\n            </section>\n          </>\n        // if nothing, return null\n          : null}\n      </div>\n    )\n  }\n}\n\nexport default Discover;","/Users/sguo/Documents/Personal Project/urbn-project/src/pages/Home.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/Col/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/Row/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/Banner/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/Navbar/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/Footer/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/Slider/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/Marker/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/Card/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/components/MapAutoAomplete/index.js",[],"/Users/sguo/Documents/Personal Project/urbn-project/src/pages/Test.js",["68","69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":217,"column":13,"nodeType":"76","endLine":217,"endColumn":29},{"ruleId":"74","severity":1,"message":"75","line":218,"column":13,"nodeType":"76","endLine":218,"endColumn":65},{"ruleId":"77","severity":1,"message":"78","line":3,"column":7,"nodeType":"79","messageId":"80","endLine":3,"endColumn":18},{"ruleId":"81","severity":2,"message":"82","line":3,"column":27,"nodeType":"79","messageId":"83","endLine":3,"endColumn":32},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'IntegerStep' is defined but never used.","Identifier","unusedVar","no-undef","'React' is not defined.","undef","no-global-assign","no-unsafe-negation"]